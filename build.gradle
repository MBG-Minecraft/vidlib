plugins {
	id 'base'
	id 'java'
	id 'idea'
	id 'maven-publish'
	id 'net.neoforged.moddev' version "2.0.107"
}

var ENV = System.getenv()
var localBuildFile = new File(project.rootDir, "build.txt")
var localBuildNumber = localBuildFile.getText("UTF-8").toInteger() + 1

version = "${mod_version}-build.$localBuildNumber"
group = project.maven_group
base.archivesName = project.archives_base_name

println("Building version: ${version}")

neoForge {
	version = project.neoforge_version
	validateAccessTransformers = true

	accessTransformers {
		publish(project.file('src/main/resources/META-INF/accesstransformer.cfg'))
	}

	interfaceInjectionData {
		from(file('interfaces.json'))
		publish(file('interfaces.json'))
	}

	runs {
		configureEach {
			logLevel = org.slf4j.event.Level.INFO
		}

		client {
			ideName = 'Client'
			client()
			systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id

			if (ENV.MC_CLIENT_ARGS) {
				programArguments.addAll(ENV.MC_CLIENT_ARGS.split(' '))
			}

			jvmArguments.addAll("-XX:+IgnoreUnrecognizedVMOptions", "-XX:+AllowEnhancedClassRedefinition")
			gameDirectory = file 'runs/client'
		}

		client2 {
			ideName = 'Client 2'
			client()
			systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id

			if (ENV.MC_CLIENT_2_ARGS) {
				programArguments.addAll(ENV.MC_CLIENT_2_ARGS.split(' '))
			}

			jvmArguments.addAll("-XX:+IgnoreUnrecognizedVMOptions", "-XX:+AllowEnhancedClassRedefinition")
			gameDirectory = file 'runs/client'
		}

		server {
			ideName = 'Server'
			server()
			programArgument("--nogui")
			gameDirectory = file 'runs/server'
		}
	}

	mods {
		vidlib {
			sourceSet sourceSets.main
		}
	}
}

compileJava {
	options.encoding = "UTF-8"
	options.release.set(21)
	options.compilerArgs << '-parameters' << '-Xmaxerrs' << '1000'
}

java {
	sourceCompatibility = targetCompatibility = '21'
	withSourcesJar()
}

configurations {
	runtimeClasspath.extendsFrom localRuntime
}

repositories {
	mavenLocal()
	mavenCentral()

	maven {
		url "https://maven.neoforged.net/releases"
	}

	maven {
		url = 'https://maven.parchmentmc.org'
		content {
			includeGroup "org.parchmentmc.data"
		}
	}

	maven {
		url = 'https://maven.latvian.dev/releases'
		content {
			includeGroup "dev.latvian.mods"
		}
	}

	maven {
		url = 'https://maven.latvian.dev/mirror'
		content {
			includeGroup "dev.latvian.mods"
		}
	}

	maven {
		url = 'https://api.modrinth.com/maven'
		content {
			includeGroup "maven.modrinth"
		}
	}

	maven {
		url = 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
		content {
			includeGroup "software.bernie.geckolib"
		}
	}
}

dependencies {
	jarJar(implementation('dev.latvian.mods:klib')) {
		version {
			strictly "[$klib_version,)"
			prefer "$klib_version"
		}
	}

	interfaceInjectionData("dev.latvian.mods:klib:$klib_version")

	compileOnly("dev.latvian.mods:imgui-resources:$imgui_resources_version")

	compileOnly("maven.modrinth:simple-voice-chat:V8UvxUr5")
	compileOnly("software.bernie.geckolib:geckolib-neoforge-${minecraft_version}:${geckolib_version}")
}

processResources {
	def toReplace = [
			"version": project.version
	]

	println("[Process Resources] Replacing properties in resources: " + toReplace)

	inputs.properties toReplace
	filesMatching("META-INF/neoforge.mods.toml") {
		expand toReplace
	}
}

jar {
	manifest {
		attributes([
				"Specification-Title"     : project.mod_id,
				"Specification-Vendor"    : project.mod_author,
				"Specification-Version"   : "1",
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : version,
				"Implementation-Vendor"   : project.mod_author,
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

publishing {
	publications {
		mavenNeoForge(MavenPublication) {
			artifactId = archives_base_name
			from components.java
		}
	}

	repositories {
		if (ENV.MAVEN_URL && ENV.MAVEN_USERNAME && ENV.MAVEN_TOKEN) {
			maven {
				url = ENV.MAVEN_URL
				credentials {
					username = ENV.MAVEN_USERNAME
					password = ENV.MAVEN_TOKEN
				}
			}
		}

		/*
		if (ENV.MBG_MAVEN_URL && ENV.MBG_MAVEN_USERNAME && ENV.MBG_MAVEN_TOKEN) {
			maven {
				url = ENV.MBG_MAVEN_URL
				credentials {
					username = ENV.MBG_MAVEN_USERNAME
					password = ENV.MBG_MAVEN_TOKEN
				}
			}
		}
		 */
	}
}

idea {
	module {
		downloadSources = true
		downloadJavadoc = true

		["client", "server"].each {
			[
					"config",
					"crash-reports",
					"debug",
					"downloads",
					"flashback",
					"local",
					"logs",
					"mods",
					"pack-sync",
					"profilekeys",
					"saves",
					"voicechat_recordings",
					"command_history.txt",
					"options.txt",
					"server.properties",
					"world",
			].each { ext ->
				excludeDirs.add(file("runs/$it/$ext"))
			}
		}
	}
}

tasks.register('increaseLocalBuild') {
	group 'build'
	description 'Increase local build number'

	doFirst {
		localBuildFile.setText(localBuildNumber.toString(), "UTF-8")
	}
}

tasks.register('releaseLocalBuild') {
	group 'build'
	description 'Builds the mod locally'
	dependsOn tasks.increaseLocalBuild
	dependsOn tasks.build
	dependsOn tasks.publishToMavenLocal

	if (ENV.MAVEN_URL && ENV.MAVEN_USERNAME && ENV.MAVEN_TOKEN) {
		dependsOn tasks.publish
	}
}